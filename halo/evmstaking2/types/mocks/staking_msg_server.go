// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/x/staking/types"
)

// StakingMsgServer is an autogenerated mock type for the StakingMsgServer type
type StakingMsgServer struct {
	mock.Mock
}

// CreateValidator provides a mock function with given fields: ctx, msg
func (_m *StakingMsgServer) CreateValidator(ctx context.Context, msg *types.MsgCreateValidator) (*types.MsgCreateValidatorResponse, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for CreateValidator")
	}

	var r0 *types.MsgCreateValidatorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgCreateValidator) (*types.MsgCreateValidatorResponse, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgCreateValidator) *types.MsgCreateValidatorResponse); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgCreateValidatorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgCreateValidator) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delegate provides a mock function with given fields: ctx, msg
func (_m *StakingMsgServer) Delegate(ctx context.Context, msg *types.MsgDelegate) (*types.MsgDelegateResponse, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Delegate")
	}

	var r0 *types.MsgDelegateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgDelegate) (*types.MsgDelegateResponse, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgDelegate) *types.MsgDelegateResponse); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgDelegateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgDelegate) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStakingMsgServer creates a new instance of StakingMsgServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStakingMsgServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *StakingMsgServer {
	mock := &StakingMsgServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
